/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUser"];
        put: operations["update"];
        post?: never;
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/snacks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSnackById"];
        put: operations["updateSnack"];
        post?: never;
        delete: operations["deleteSnack"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/showtimes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getShowtime"];
        put: operations["updateShowtime"];
        post?: never;
        delete: operations["deleteShowtime"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seats/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSeatById"];
        put: operations["updateSeat"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seat-types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSeatTypeById"];
        put: operations["updateSeatType"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/promotions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPromotion"];
        put: operations["updatePromotion"];
        post?: never;
        delete: operations["deletePromotion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOrderById"];
        put: operations["cancelOrder"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get"];
        put: operations["update_1"];
        post?: never;
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movie-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMovieCategoryById"];
        put: operations["updateMovieCategory"];
        post?: never;
        delete: operations["deleteMovieCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/combos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getComboById"];
        put: operations["updateCombo"];
        post?: never;
        delete: operations["deleteCombo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/combo-snacks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getComboSnackById"];
        put: operations["updateComboSnack"];
        post?: never;
        delete: operations["deleteComboSnack"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cinema-rooms/{roomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_1"];
        put: operations["update_2"];
        post?: never;
        delete: operations["delete_2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get booking by ID */
        get: operations["getBookingById"];
        /** Update booking */
        put: operations["updateBooking"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUsers"];
        put?: never;
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/snacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllSnacks"];
        put?: never;
        post: operations["createSnack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/showtimes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllShowtimes"];
        put?: never;
        post: operations["createShowtime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getReceipts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/promotions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllPromotions"];
        put?: never;
        post: operations["createPromotion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment/payos_transfer_handler": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["payosTransferHandler"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createPaymentLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/confirm-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["confirmWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAll"];
        put?: never;
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{movieId}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["addCategoryToMovie"];
        delete: operations["removeCategoryFromMovie"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movie-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllMovieCategories"];
        put?: never;
        post: operations["createMovieCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["uploadImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/combos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllCombos"];
        put?: never;
        post: operations["createCombo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/combos/{comboId}/snacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["addSnacksToCombo"];
        delete: operations["removeSnacksFromCombo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/combo-snacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllComboSnacks"];
        put?: never;
        post: operations["createComboSnack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cinema-rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAll_1"];
        put?: never;
        post: operations["create_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all bookings */
        get: operations["getAllBookings"];
        put?: never;
        /** Create a new booking */
        post: operations["createBooking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/{id}/confirm-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm booking payment
         * @description Confirm payment for a booking and cancel automatic expiration
         */
        post: operations["confirmBookingPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a booking manually
         * @description Cancel a booking with optional reason. This will also cancel any scheduled automatic expiration.
         */
        post: operations["cancelBooking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/cancel/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["cancelBookingWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/introspect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["introspect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/authenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["authenticate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserByEmailOrPhone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/showtimes/room/{roomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getShowtimesByCinemaRoom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/showtimes/movie/{movieId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getShowtimesByMovie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllSeats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seats/showtime/{showtimeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSeatsByShowtimeId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seats/room/{roomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSeatsByRoomId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seat-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllSeatTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipt/topMovie": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTrendingMovie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMoviesByStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/combo-snacks/snack/{snackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getComboSnacksBySnackId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/combo-snacks/combo/{comboId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getComboSnacksByComboId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/combo-snacks/combo/{comboId}/snack/{snackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getComboSnackByComboAndSnack"];
        put?: never;
        post?: never;
        delete: operations["deleteComboSnackByComboAndSnack"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bookings by user ID */
        get: operations["getBookingsByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/user/{userId}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bookings by user ID and status */
        get: operations["getBookingsByUserAndStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bookings by booking status */
        get: operations["getBookingsByStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/showtime/{showtimeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bookings by showtime ID */
        get: operations["getBookingsByShowtimeId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/payment-status/{paymentStatus}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bookings by payment status */
        get: operations["getBookingsByPaymentStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/date-range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bookings by date range */
        get: operations["getBookingsByDateRange"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserUpdate: {
            fullName?: string;
            phone?: string;
            address?: string;
            avatar?: string;
            role?: string;
            status?: string;
            gender?: string;
            /** Format: int32 */
            loyaltyPoint?: number;
            /** Format: date */
            dateOfBirth?: string;
        };
        ApiResponseVoid: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: unknown;
        };
        SnackRequest: {
            category?: string;
            name?: string;
            size?: string;
            flavor?: string;
            /** Format: float */
            price?: number;
            description?: string;
            img?: string;
            status?: string;
        };
        ApiResponseSnackResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["SnackResponse"];
        };
        SnackResponse: {
            /** Format: int32 */
            id?: number;
            category?: string;
            name?: string;
            size?: string;
            flavor?: string;
            /** Format: float */
            price?: number;
            description?: string;
            img?: string;
            status?: string;
        };
        ShowtimeUpdateRequest: {
            /** Format: date-time */
            showDateTime?: string;
            /** Format: date-time */
            endDateTime?: string;
            status?: string;
        };
        ApiResponseShowtimeResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["ShowtimeResponse"];
        };
        ShowtimeResponse: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            movieId?: number;
            /** Format: date-time */
            showDateTime?: string;
            /** Format: int32 */
            roomId?: number;
            roomName?: string;
            /** Format: date-time */
            endDateTime?: string;
            status?: string;
        };
        SeatRequest: {
            type?: string;
            status?: string;
            /** Format: int32 */
            linkSeatId?: number;
        };
        ApiResponseSeatResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["SeatResponse"];
        };
        SeatResponse: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            roomId?: number;
            row?: string;
            column?: string;
            name?: string;
            type?: components["schemas"]["SeatTypeResponse"];
            status?: string;
            discarded?: boolean;
            /** Format: int32 */
            linkSeatId?: number;
        };
        SeatTypeResponse: {
            /** Format: int32 */
            id?: number;
            /** @enum {string} */
            name?: "VIP" | "REGULAR" | "COUPLE" | "PATH" | "BLOCK";
            /** Format: float */
            price?: number;
            /** Format: int32 */
            seatCount?: number;
        };
        SeatTypeRequest: {
            /** @enum {string} */
            name: "VIP" | "REGULAR" | "COUPLE" | "PATH" | "BLOCK";
            /** Format: float */
            price: number;
        };
        ApiResponseSeatTypeResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["SeatTypeResponse"];
        };
        PromotionUpdateRequest: {
            image?: string;
            title?: string;
            type?: string;
            /** Format: double */
            minPurchase?: number;
            /** Format: double */
            discountValue?: number;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            description?: string;
            status?: string;
        };
        ApiResponsePromotionResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["PromotionResponse"];
        };
        PromotionResponse: {
            /** Format: int64 */
            id?: number;
            image?: string;
            title?: string;
            type?: string;
            /** Format: double */
            minPurchase?: number;
            /** Format: double */
            discountValue?: number;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            description?: string;
            status?: string;
        };
        MovieUpdateRequest: {
            name?: string;
            /** Format: int32 */
            ageRestrict?: number;
            /** Format: date */
            fromDate?: string;
            /** Format: date */
            toDate?: string;
            actor?: string;
            studio?: string;
            director?: string;
            /** Format: int32 */
            duration?: number;
            trailer?: string;
            categoryIds?: number[];
            description?: string;
            status?: string;
            poster?: string;
            banner?: string;
        };
        ApiResponseMovieResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["MovieResponse"];
        };
        MovieCategoryResponse: {
            /** Format: int32 */
            id?: number;
            name?: string;
            description?: string;
        };
        MovieResponse: {
            /** Format: int32 */
            id?: number;
            name?: string;
            /** Format: int32 */
            ageRestrict?: number;
            fromDate?: string;
            toDate?: string;
            actor?: string;
            studio?: string;
            director?: string;
            /** Format: int32 */
            duration?: number;
            trailer?: string;
            categories?: components["schemas"]["MovieCategoryResponse"][];
            description?: string;
            status?: string;
            poster?: string;
            showtimes?: components["schemas"]["ShowtimeResponse"][];
            banner?: string;
        };
        MovieCategoryRequest: {
            name?: string;
            description?: string;
        };
        ApiResponseMovieCategoryResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["MovieCategoryResponse"];
        };
        ComboRequest: {
            name?: string;
            description?: string;
            status?: string;
            img?: string;
            snacks?: components["schemas"]["SnackFromComboRequest"][];
            /** Format: float */
            price?: number;
            /** Format: float */
            discount?: number;
        };
        SnackFromComboRequest: {
            /** Format: int32 */
            snackId?: number;
            /** Format: int32 */
            quantity?: number;
        };
        ApiResponseComboResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["ComboResponse"];
        };
        ComboResponse: {
            /** Format: int32 */
            id?: number;
            name?: string;
            description?: string;
            status?: string;
            img?: string;
            /** Format: float */
            price?: number;
            /** Format: float */
            discount?: number;
            comboSnacks?: components["schemas"]["ComboSnackResponse"][];
        };
        ComboSnackResponse: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            quantity?: number;
            combo?: unknown;
            snack?: components["schemas"]["SnackResponse"];
        };
        ComboSnackRequest: {
            /** Format: int32 */
            comboId?: number;
            /** Format: int32 */
            snackId?: number;
            /** Format: int32 */
            quantity?: number;
        };
        ApiResponseComboSnackResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["ComboSnackResponse"];
        };
        CinemaRoomUpdateRequest: {
            name?: string;
            type?: string;
            /** Format: double */
            fee?: number;
            /** Format: int32 */
            capacity?: number;
            status?: string;
            /** Format: int32 */
            width?: number;
            /** Format: int32 */
            length?: number;
        };
        ApiResponseCinemaRoomResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["CinemaRoomResponse"];
        };
        CinemaRoomResponse: {
            /** Format: int32 */
            id?: number;
            name?: string;
            type?: string;
            /** Format: double */
            fee?: number;
            /** Format: int32 */
            capacity?: number;
            status?: string;
            /** Format: int32 */
            width?: number;
            /** Format: int32 */
            length?: number;
            seats?: components["schemas"]["SeatResponse"][];
        };
        BookingUpdate: {
            /** @enum {string} */
            status?: "PENDING" | "SUCCESS" | "CANCELLED";
            /** @enum {string} */
            paymentStatus?: "PENDING" | "SUCCESS" | "FAILED";
            payOsCode?: string;
            /** Format: int32 */
            loyaltyPointsUsed?: number;
            staffId?: string;
        };
        UserRequest: {
            email: string;
            fullName: string;
            password: string;
            phone?: string;
            role?: string;
            /** Format: date */
            dateOfBirth?: string;
        };
        ApiResponseUserResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["UserResponse"];
        };
        UserResponse: {
            id?: string;
            email?: string;
            fullName?: string;
            phone?: string;
            address?: string;
            avatar?: string;
            role?: string;
            status?: string;
            /** Format: date */
            dateOfBirth?: string;
            /** Format: int32 */
            loyaltyPoint?: number;
            /** @enum {string} */
            gender?: "MALE" | "FEMALE" | "OTHER";
        };
        ShowtimeRequest: {
            /** Format: int32 */
            movieId?: number;
            /** Format: date-time */
            showDateTime?: string;
            /** Format: int32 */
            roomId?: number;
            /** Format: date-time */
            endDateTime?: string;
        };
        ReceiptFilterRequest: {
            userId?: string;
            /** Format: date */
            fromDate?: string;
            /** Format: date */
            toDate?: string;
            bookingId?: string;
            movieName?: string;
            /** @enum {string} */
            paymentMethod?: "CASH" | "ONLINE";
            refunded?: boolean;
            /** Format: float */
            minAmount?: number;
            /** Format: float */
            maxAmount?: number;
        };
        ApiResponseListReceipt: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["Receipt"][];
        };
        Receipt: {
            /** Format: int32 */
            id?: number;
            user?: components["schemas"]["User"];
            /** Format: int32 */
            bookingId?: number;
            /** Format: int32 */
            movieId?: number;
            movieName?: string;
            /** Format: date-time */
            showtime?: string;
            promotionName?: string;
            roomName?: string;
            items?: components["schemas"]["ReceiptItem"][];
            /** Format: float */
            totalAmount?: number;
            /** @enum {string} */
            paymentMethod?: "CASH" | "ONLINE";
            refunded?: boolean;
            paymentReference?: string;
            /** Format: date-time */
            issuedAt?: string;
            /** Format: int32 */
            addedPoints?: number;
            /** Format: int32 */
            usedPoints?: number;
            /** Format: int32 */
            refundedPoints?: number;
            /** Format: int32 */
            ticketCount?: number;
        };
        ReceiptItem: {
            /** Format: int32 */
            id?: number;
            receipt?: components["schemas"]["Receipt"];
            name?: string;
            /** Format: float */
            unitPrice?: number;
            /** Format: float */
            totalPrice?: number;
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            type?: "COMBO" | "SNACK" | "TICKET";
        };
        /** @description User entity */
        User: {
            /**
             * @description User ID
             * @example uuid-1234
             */
            id?: string;
            /**
             * @description Full name
             * @example John Doe
             */
            fullName?: string;
            /**
             * Format: date
             * @description Date of birth
             * @example 1990-01-01
             */
            dateOfBirth?: string;
            /**
             * @description Email address
             * @example john@example.com
             */
            email?: string;
            /**
             * @description Password (hashed)
             * @example hashedpassword
             */
            password?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "BANNED";
            phone?: string;
            address?: string;
            /**
             * @description Role name
             * @example CUSTOMER
             * @enum {string}
             */
            role?: "ADMIN" | "MANAGER" | "MEMBER" | "STAFF";
            avatar?: string;
            /** Format: int32 */
            loyaltyPoint?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** @enum {string} */
            gender?: "MALE" | "FEMALE" | "OTHER";
        };
        PromotionRequest: {
            image?: string;
            title: string;
            type: string;
            /** Format: double */
            minPurchase: number;
            /** Format: double */
            discountValue: number;
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            description: string;
            status: string;
        };
        CreatePaymentLinkRequest: {
            productName?: string;
            description?: string;
            returnUrl?: string;
            /** Format: int32 */
            price?: number;
            cancelUrl?: string;
        };
        ConfirmWebhookRequest: {
            webhookUrl?: string;
        };
        MovieRequest: {
            name: string;
            /** Format: int32 */
            ageRestrict: number;
            /** Format: date */
            fromDate: string;
            /** Format: date */
            toDate: string;
            actor: string;
            studio: string;
            director: string;
            /** Format: int32 */
            duration?: number;
            trailer: string;
            categoryIds: number[];
            description: string;
            status: string;
            poster: string;
            banner?: string;
        };
        ApiResponseString: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: string;
        };
        CinemaRoomRequest: {
            name: string;
            type: string;
            /** Format: double */
            fee: number;
            /** Format: int32 */
            capacity: number;
            /** Format: int32 */
            width: number;
            /** Format: int32 */
            length: number;
        };
        BookingComboRequest: {
            /** Format: int32 */
            comboId: number;
            /** Format: int32 */
            quantity: number;
        };
        BookingRequest: {
            userId: string;
            /** Format: int32 */
            showtimeId: number;
            /** Format: int32 */
            promotionId?: number;
            seatIds: number[];
            /** Format: float */
            totalPrice?: number;
            /** @enum {string} */
            paymentMethod: "CASH" | "ONLINE";
            staffId?: string;
            /** Format: float */
            estimatedPrice: number;
            /** Format: int32 */
            loyaltyPointsUsed?: number;
            bookingCombos?: components["schemas"]["BookingComboRequest"][];
            bookingSnacks?: components["schemas"]["BookingSnackRequest"][];
            feUrl?: string;
        };
        BookingSnackRequest: {
            /** Format: int32 */
            snackId: number;
            /** Format: int32 */
            quantity: number;
        };
        ApiResponseBookingResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["BookingResponse"];
        };
        BookingComboResponse: {
            combo?: components["schemas"]["ComboResponse"];
            /** Format: int32 */
            quantity?: number;
            /** Format: float */
            unitPrice?: number;
            /** Format: float */
            totalPrice?: number;
        };
        BookingResponse: {
            /** Format: int32 */
            id?: number;
            user?: components["schemas"]["UserResponse"];
            /** Format: date-time */
            bookingDate?: string;
            showTime?: components["schemas"]["ShowtimeResponse"];
            promotion?: components["schemas"]["PromotionResponse"];
            seats?: components["schemas"]["SeatResponse"][];
            /** Format: int32 */
            loyaltyPointsUsed?: number;
            /** Format: float */
            totalPrice?: number;
            /** @enum {string} */
            paymentMethod?: "CASH" | "ONLINE";
            /** @enum {string} */
            paymentStatus?: "PENDING" | "SUCCESS" | "FAILED";
            staffId?: string;
            /** @enum {string} */
            status?: "PENDING" | "SUCCESS" | "CANCELLED";
            payOsCode?: string;
            payOsLink?: string;
            bookingSnacks?: components["schemas"]["BookingSnackResponse"][];
            bookingCombos?: components["schemas"]["BookingComboResponse"][];
        };
        BookingSnackResponse: {
            snack?: components["schemas"]["SnackResponse"];
            /** Format: int32 */
            quantity?: number;
            /** Format: float */
            unitPrice?: number;
            /** Format: float */
            totalPrice?: number;
        };
        ApiResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: unknown;
        };
        IntrospectRequest: {
            token?: string;
        };
        ApiResponseIntrospectResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["IntrospectResponse"];
        };
        IntrospectResponse: {
            valid?: boolean;
        };
        AuthenticationRequest: {
            email: string;
            password: string;
        };
        ApiResponseAuthenticationResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["AuthenticationResponse"];
        };
        AuthenticationResponse: {
            token?: string;
            freshToken?: string;
            /** @enum {string} */
            roles?: "ADMIN" | "MANAGER" | "MEMBER" | "STAFF";
            fullName?: string;
            id?: string;
        };
        ApiResponseListUserResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["UserResponse"][];
        };
        ApiResponseListSnackResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["SnackResponse"][];
        };
        ApiResponseListShowtimeResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["ShowtimeResponse"][];
        };
        ApiResponseListSeatResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["SeatResponse"][];
        };
        ApiResponseListPickingSeatResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["PickingSeatResponse"][];
        };
        PickingSeatResponse: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            roomId?: number;
            row?: string;
            column?: string;
            name?: string;
            type?: components["schemas"]["SeatTypeResponse"];
            status?: string;
            selected?: boolean;
        };
        ApiResponseListSeatTypeResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["SeatTypeResponse"][];
        };
        ApiResponseListMovieTrendingResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["MovieTrendingResponse"][];
        };
        MovieTrendingResponse: {
            /** Format: int32 */
            movieId?: number;
            movieName?: string;
            /** Format: int64 */
            ticketCount?: number;
            /** Format: double */
            totalRevenue?: number;
        };
        ApiResponseListPromotionResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["PromotionResponse"][];
        };
        ApiResponseListMovieResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["MovieResponse"][];
        };
        ApiResponseListMovieCategoryResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["MovieCategoryResponse"][];
        };
        ApiResponseListComboResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["ComboResponse"][];
        };
        ApiResponseListComboSnackResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["ComboSnackResponse"][];
        };
        ApiResponseListCinemaRoomResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["CinemaRoomResponse"][];
        };
        ApiResponseListBookingResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            result?: components["schemas"]["BookingResponse"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseUserResponse"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getSnackById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseSnackResponse"];
                };
            };
        };
    };
    updateSnack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SnackRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseSnackResponse"];
                };
            };
        };
    };
    deleteSnack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getShowtime: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseShowtimeResponse"];
                };
            };
        };
    };
    updateShowtime: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShowtimeUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseShowtimeResponse"];
                };
            };
        };
    };
    deleteShowtime: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getSeatById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseSeatResponse"];
                };
            };
        };
    };
    updateSeat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SeatRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseSeatResponse"];
                };
            };
        };
    };
    getSeatTypeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseSeatTypeResponse"];
                };
            };
        };
    };
    updateSeatType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SeatTypeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseSeatTypeResponse"];
                };
            };
        };
    };
    getPromotion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponsePromotionResponse"];
                };
            };
        };
    };
    updatePromotion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromotionUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponsePromotionResponse"];
                };
            };
        };
    };
    deletePromotion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getOrderById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    cancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseMovieResponse"];
                };
            };
        };
    };
    update_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseMovieResponse"];
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getMovieCategoryById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseMovieCategoryResponse"];
                };
            };
        };
    };
    updateMovieCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieCategoryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseMovieCategoryResponse"];
                };
            };
        };
    };
    deleteMovieCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getComboById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboResponse"];
                };
            };
        };
    };
    updateCombo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComboRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboResponse"];
                };
            };
        };
    };
    deleteCombo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getComboSnackById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboSnackResponse"];
                };
            };
        };
    };
    updateComboSnack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComboSnackRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboSnackResponse"];
                };
            };
        };
    };
    deleteComboSnack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    get_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseCinemaRoomResponse"];
                };
            };
        };
    };
    update_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CinemaRoomUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseCinemaRoomResponse"];
                };
            };
        };
    };
    delete_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getBookingById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseBookingResponse"];
                };
            };
        };
    };
    updateBooking: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingUpdate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListUserResponse"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseUserResponse"];
                };
            };
        };
    };
    getAllSnacks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListSnackResponse"];
                };
            };
        };
    };
    createSnack: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SnackRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseSnackResponse"];
                };
            };
        };
    };
    getAllShowtimes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListShowtimeResponse"];
                };
            };
        };
    };
    createShowtime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShowtimeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseShowtimeResponse"];
                };
            };
        };
    };
    getReceipts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReceiptFilterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListReceipt"];
                };
            };
        };
    };
    getAllPromotions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListPromotionResponse"];
                };
            };
        };
    };
    createPromotion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromotionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponsePromotionResponse"];
                };
            };
        };
    };
    payosTransferHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    createPaymentLink: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePaymentLinkRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    confirmWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmWebhookRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    getAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListMovieResponse"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseMovieResponse"];
                };
            };
        };
    };
    addCategoryToMovie: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                movieId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseMovieResponse"];
                };
            };
        };
    };
    removeCategoryFromMovie: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                movieId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseMovieResponse"];
                };
            };
        };
    };
    getAllMovieCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListMovieCategoryResponse"];
                };
            };
        };
    };
    createMovieCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MovieCategoryRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseMovieCategoryResponse"];
                };
            };
        };
    };
    uploadImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseString"];
                };
            };
        };
    };
    getAllCombos: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListComboResponse"];
                };
            };
        };
    };
    createCombo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComboRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboResponse"];
                };
            };
        };
    };
    addSnacksToCombo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comboId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SnackFromComboRequest"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboResponse"];
                };
            };
        };
    };
    removeSnacksFromCombo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comboId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboResponse"];
                };
            };
        };
    };
    getAllComboSnacks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListComboSnackResponse"];
                };
            };
        };
    };
    createComboSnack: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComboSnackRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboSnackResponse"];
                };
            };
        };
    };
    getAll_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListCinemaRoomResponse"];
                };
            };
        };
    };
    create_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CinemaRoomRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseCinemaRoomResponse"];
                };
            };
        };
    };
    getAllBookings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListBookingResponse"];
                };
            };
        };
    };
    createBooking: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseBookingResponse"];
                };
            };
        };
    };
    confirmBookingPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    cancelBooking: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    cancelBookingWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse"];
                };
            };
        };
    };
    introspect: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IntrospectRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseIntrospectResponse"];
                };
            };
        };
    };
    authenticate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseAuthenticationResponse"];
                };
            };
        };
    };
    getUserByEmailOrPhone: {
        parameters: {
            query: {
                input: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseUserResponse"];
                };
            };
        };
    };
    getShowtimesByCinemaRoom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListShowtimeResponse"];
                };
            };
        };
    };
    getShowtimesByMovie: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                movieId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListShowtimeResponse"];
                };
            };
        };
    };
    getAllSeats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListSeatResponse"];
                };
            };
        };
    };
    getSeatsByShowtimeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                showtimeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListPickingSeatResponse"];
                };
            };
        };
    };
    getSeatsByRoomId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListSeatResponse"];
                };
            };
        };
    };
    getAllSeatTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListSeatTypeResponse"];
                };
            };
        };
    };
    getTrendingMovie: {
        parameters: {
            query: {
                fromDate: string;
                toDate: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListMovieTrendingResponse"];
                };
            };
        };
    };
    getMoviesByStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                status: "ACTIVE" | "INACTIVE" | "UPCOMING";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListMovieResponse"];
                };
            };
        };
    };
    getComboSnacksBySnackId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                snackId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListComboSnackResponse"];
                };
            };
        };
    };
    getComboSnacksByComboId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comboId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListComboSnackResponse"];
                };
            };
        };
    };
    getComboSnackByComboAndSnack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comboId: number;
                snackId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseComboSnackResponse"];
                };
            };
        };
    };
    deleteComboSnackByComboAndSnack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comboId: number;
                snackId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseVoid"];
                };
            };
        };
    };
    getBookingsByUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListBookingResponse"];
                };
            };
        };
    };
    getBookingsByUserAndStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                status: "PENDING" | "SUCCESS" | "CANCELLED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListBookingResponse"];
                };
            };
        };
    };
    getBookingsByStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                status: "PENDING" | "SUCCESS" | "CANCELLED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListBookingResponse"];
                };
            };
        };
    };
    getBookingsByShowtimeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                showtimeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListBookingResponse"];
                };
            };
        };
    };
    getBookingsByPaymentStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paymentStatus: "PENDING" | "SUCCESS" | "FAILED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListBookingResponse"];
                };
            };
        };
    };
    getBookingsByDateRange: {
        parameters: {
            query: {
                startDate: string;
                endDate: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseListBookingResponse"];
                };
            };
        };
    };
}
